{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Pianola World's finest piano roll visualizer, where elegance meets motion         Links \u2022     \u2705 Installation \u2022     \ud83d\udce6 Documentation \u2022     \ud83d\udd25 Issues \u2022     \u2764\ufe0f Funding <sub> YouTube \u2022     GitHub \u2022     Contact \u2022     Changelog \u2022     Uninstalling \u2022     License </sub> <p><sup>\u2696\ufe0f The Entertainer by Scott Joplin (Public Domain), Salamander Grand Piano by Alexander Holm (CC-BY 3.0)</sup></p>"},{"location":"#description","title":"\ud83d\udd25 Description","text":"<p>Pianola is an elegant and powerful dynamic piano roll visualizer written in Python and GLSL Shaders, with an focus on quality, performance and visuals. Unresistable after you see it.</p> <ul> <li> <p> Visualize your midi files in a beautiful and smooth piano roll animation, with unrestricted customization in the code and high quality output.</p> </li> <li> <p> Spring physics model governing many animations, providing a realistic and organic feel to the visuals - a unique innovation in the market.</p> </li> <li> <p> Commercial use allowed and encouraged - Simply attribute the project, and go the extra mile by supporting this project and others directly!</p> </li> </ul> <p>All the benefits of the parent project ShaderFlow are also present \ud83c\udf89</p>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<p>Head out to the official website for the latest installation instructions and more!</p> <p> </p>"},{"location":"#usage","title":"\u2b50\ufe0f Usage","text":"<p>\ud83d\udea7 Under construction \ud83d\udea7</p> <p>Run <code>pianola --help</code> to see all available commands for now!</p>"},{"location":"#community","title":"\u267b\ufe0f Community","text":"<p>Be featured here if you make any integrations or a channel using Pianola!</p> <p>\ud83c\udf35 Such an empty place here, for now..</p>"},{"location":"about/contact/","title":"About/Contact","text":"<ul> <li> <p> Discord <p>Largest community, fastest responses</p> <ul><li>Priority sponsors support</li></ul> Join Server</p> </li> <li> <p> GitHub <p>Officialize your Requests or Issues</p> <ul><li>One repository per project</li></ul> All Projects</p> </li> <li> <p> Telegram <p>Also an option if you prefer over others!</p> <ul><li>Larger uploads can be useful</li></ul> Join Group</p> </li> <li> <p> Email <p>Get in touch directly and privately</p> <ul><li>Business or Traditional</li></ul> Send a Message</p> </li> </ul> <p>I live on the UTC-04:00 Timezone (EDT), so I might be sleeping when you send me a message</p> <p>Feel free to talk in any of the Languages: \ud83c\udde7\ud83c\uddf7 \ud83c\uddfa\ud83c\uddf8</p>"},{"location":"about/roadmap/","title":"Roadmap","text":"<p>     Click here to see the Roadmap on GitHub Projects </p>"},{"location":"get/","title":"Installation","text":""},{"location":"get/#from-wheels","title":"\ud83e\uddc0 From Wheels","text":"<p> <p>The most reliable way to use the projects \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Run directly with astral-sh/uv tools or use as a package</li> <li>Run the package commands or as a python import</li> </ul> <p><sup>Recommended for: Basic users, advanced users, developers</sup></p> <p></p>"},{"location":"get/#from-source","title":"\ud83d\udd25 From Source","text":"<p> <p>The most flexible way to use the projects \u2b50\ufe0f\u2b50\ufe0f</p> <ul> <li>Automatic install scripts, spend more time using the projects</li> <li>Latest features, bugs, fixes, highly configurable</li> </ul> <p><sup>Recommended for: Advanced users, contributors, developers</sup></p> <p></p>"},{"location":"get/installers/","title":"Installers","text":"Windows Linux MacOS <p> Note: Executables are safe and auditable, but might trigger false antivirus alerts     I will not destroy my reputation by distributing malware, code signing is infeasible. </p> x86-64 <p></p> <p> Note: Open a terminal in the download path, extract it with <code>cat *.tar.gz | tar -xzvf - -i</code> <sup>And then run <code>./project-name-*.bin</code> shown in the previous output for executing it!</sup> </p> x86-64ARM64 <p></p> <p></p> <p> Note: Open a terminal in the download path, extract it with <code>cat *.tar.gz | tar -xzvf - -i</code> <sup>And then run <code>./project-name-*.bin</code> shown in the previous output for executing it!</sup> </p> Apple SiliconIntel Macs <p></p> <p></p> <p><sup> \u2764\ufe0f Note: You can contact me for a free copy of a paid executable with a valid or altruistic reason!</sup></p>"},{"location":"get/installers/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>Workspaces: Where data, models, versions, cache of the projects are stored</p> <p>All project's Workspaces are located in your platform's <code>User Data</code> directory:   Windows C:\\Users\\(...)\\AppData\\Local\\BrokenSource  MacOS ~/Library/Application Support/BrokenSource  Linux ~/.local/share/BrokenSource </p> <p>Note: This should be the only directory used by Installers</p>"},{"location":"get/source/","title":"Source","text":"Windows Linux MacOS Manual <p> Open a folder to download the code on Windows Explorer Press Ctrl+L , run <code>powershell</code> and execute: <pre><code>irm https://brokensrc.dev/get.ps1 | iex\n</code></pre> How it works: <code>irm</code> downloads the script, <code>iex</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p> Open a Terminal on some directory and run: <pre><code>/bin/bash -c \"$(curl -sS https://brokensrc.dev/get.sh)\"\n</code></pre> How it works: <code>curl</code> downloads the script, <code>bash</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p> Open a Terminal on some directory and run: <pre><code>/bin/bash -c \"$(curl -sS https://brokensrc.dev/get.sh)\"\n</code></pre> How it works: <code>curl</code> downloads the script, <code>bash</code> executes it directly  Don't want to use it? Follow the  Manual tab above!</p> <p></p> <ul> <li>Install git and uv on your Platform</li> </ul> <p>Download the code<pre><code>git clone https://github.com/BrokenSource/BrokenSource --recurse-submodules\n</code></pre> Enter the directory<pre><code>cd BrokenSource\n</code></pre> Ensure submodules are on main<pre><code>git submodule foreach --recursive 'git checkout main || true'\n</code></pre> Create venv and install dependencies<pre><code>uv sync --all-packages\n</code></pre></p> Directly with uvTraditional method <p></p> Start using any Project<pre><code>uv run shaderflow\nuv run depthflow\nuv run broken\n</code></pre> <p></p> <p>Activate the venv<pre><code># Windows:\n.venv\\Scripts\\Activate.ps1 # PowerShell\n.venv\\Scripts\\Activate.bat # CMD\n\n# Linux and MacOS:\nsource .venv/bin/activate # Bash\nsource .venv/bin/activate.fish # Fish\n</code></pre> Start using any Project<pre><code>broken\nshaderflow\ndepthflow\n</code></pre></p>"},{"location":"get/source/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>Apart from deleting the <code>BrokenSource</code> folder where you cloned the code,</p> <p>Workspaces: Where data, models, versions, cache of the projects are stored</p> <p>All project's Workspaces are located in your platform's <code>User Data</code> directory:   Windows C:\\Users\\(...)\\AppData\\Local\\BrokenSource  MacOS ~/Library/Application Support/BrokenSource  Linux ~/.local/share/BrokenSource </p> <p>Models: PyTorch, HuggingFace, TorchHub downloads models on:</p> <p>  Windows C:\\Users\\(...)\\.cache\\{huggingface,transformers,torch}  MacOS ~/Library/Caches/{huggingface,transformers,torch}  Linux ~/.cache/{huggingface,transformers,torch} </p> <p>Package manager cache: </p>  uv Pip Poetry PDM <p>Either run <code>uv cache prune</code> or <code>uv cache dir</code> to locate wheel downloads caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\uv  MacOS ~/Library/Caches/uv  Linux ~/.cache/uv </p> <p>Either run <code>pip cache purge</code> or <code>pip cache dir</code> to locate wheel download caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pip  MacOS ~/Library/Caches/pip  Linux ~/.cache/pip </p> <p>Either run <code>poetry cache clear</code> or <code>poetry cache list</code> to locate caches and venvs, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pypoetry  MacOS ~/Library/Caches/pypoetry  Linux ~/.cache/pypoetry </p> <p>Either run <code>pdm cache clear</code> or <code>pdm cache list</code> to locate wheel downloads caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pdm  MacOS ~/Library/Caches/pdm  Linux ~/.cache/pdm </p>"},{"location":"get/wheels/","title":"Wheels","text":"Directly Package <p>  1. Open a Terminal and install astral-sh/uv - a fast python and project manager:</p>  Windows Linux MacOS <p>Using WinGet, Microsoft's official package manager: <pre><code>winget install --id=astral-sh.uv -e\n</code></pre></p> <p>Install from your distro package manager, or universally: <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre></p> <p>Using Homebrew, a popular package manager for MacOS: <pre><code>brew install uv\n</code></pre></p> <p> 2. Run any project simply with: <pre><code>uvx (project) (args)\n</code></pre>  For example <code>uvx depthflow gradio</code></p> <p>  Add any project to your <code>pyproject.toml</code> or install inside a venv, write and run any scripts.</p> <ul> <li>Check the examples tabs at the top or the repository for usage!</li> </ul> <p>Preferably pin the package version <code>==x.y.z</code> anywhere for stability!</p>"},{"location":"get/wheels/#uninstalling","title":"\u267b\ufe0f Uninstalling","text":"<p>Apart from uninstalling the package and/or deleting the virtual environment:</p> <p>Workspaces: Where data, models, versions, cache of the projects are stored</p> <p>All project's Workspaces are located in your platform's <code>User Data</code> directory:   Windows C:\\Users\\(...)\\AppData\\Local\\BrokenSource  MacOS ~/Library/Application Support/BrokenSource  Linux ~/.local/share/BrokenSource </p> <p>Models: PyTorch, HuggingFace, TorchHub downloads models on:</p> <p>  Windows C:\\Users\\(...)\\.cache\\{huggingface,transformers,torch}  MacOS ~/Library/Caches/{huggingface,transformers,torch}  Linux ~/.cache/{huggingface,transformers,torch} </p> <p>Package manager cache: </p>  uv Pip Poetry PDM <p>Either run <code>uv cache prune</code> or <code>uv cache dir</code> to locate wheel downloads caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\uv  MacOS ~/Library/Caches/uv  Linux ~/.cache/uv </p> <p>Either run <code>pip cache purge</code> or <code>pip cache dir</code> to locate wheel download caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pip  MacOS ~/Library/Caches/pip  Linux ~/.cache/pip </p> <p>Either run <code>poetry cache clear</code> or <code>poetry cache list</code> to locate caches and venvs, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pypoetry  MacOS ~/Library/Caches/pypoetry  Linux ~/.cache/pypoetry </p> <p>Either run <code>pdm cache clear</code> or <code>pdm cache list</code> to locate wheel downloads caches, should be at:   Windows C:\\Users\\(...)\\AppData\\Local\\pdm  MacOS ~/Library/Caches/pdm  Linux ~/.cache/pdm </p>"}]}